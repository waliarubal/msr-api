#!/usr/bin/env node

/**

 *  @Logic
 * Server Creation
 * Port Configuration
 * Event Listening on server
 * Error handling for event listening
*/
require("dotenv").config();

const process = require("process");
const config = require("../src/config");

const app = require("../app");
const debug = require("debug")("api:server");
const http = require("http");
var fs = require("fs");
var options = {
  // key: fs.readFileSync('./.cert/key.pem'),
  // cert: fs.readFileSync('./.cert/cert.pem')
};
/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT;

app.set("port", port);
/**
 * Create HTTP server.
 */
const server = http.createServer(options, app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
console.log(`Worker ${process.pid} started`);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("Server is Listening on port: " + port);
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
